# NGINX configuration to allow running static-cms in live-reload mode with real GitHub OAuth backend
#
# This is for local development only!
#
# USAGE:
#   1. handbook: run a local nginx container with this config listening on http://localhost:8081
#     - podman run -it -p 8081:8081 --network slirp4netns:allow_host_loopback=true --mount type=bind,src=proxy/proxy-cms-admin-dev.conf,target=/etc/nginx/conf.d/default.conf quay.io/giantswarm/nginx-unprivileged:1.21-alpine
#   2. staticjscms-standalone: run OAuth reverse proxy listening on http://localhost:8082 (also holds a static-cms build, but we don't use it)
#     - make sure an .env file with the following variables exists
#       - ORIGIN=http://localhost:8081
#       - OAUTH_CLIENT_ID={YOUR GITHUB CLIENT ID, See GitHub Settings->Developer Options->OAuth Apps}
#       - OAUTH_CLIENT_SECRET={YOUR GITHUB CLIENT SECRET, See GitHub Settings->Developer Options->OAuth Apps}
#       - GIT_HOSTNAME=
#     - podman build -f Dockerfile -t staticjscms-standalone:latest
#     - podman run -it -p 8082:80 --env-file .env staticjscms-standalone:latest
#   3. static-cms: run in live-reload "dev mode" listening on http://localhost:8080
#     - copy handbook/cms/cms-config-dev.yml to static-cms/core/dev-test/config.yml  (must have GitHub backend with "base_url: http://localhost:8081")
#     - Replace the content of static-cms/core/dev-test/index.js with the <script> content of https://github.com/giantswarm/staticjscms-hugo-standalone/blob/master/app/staticcms/public/index.html
#     - OPTIONAL: change the "repo: giantswarm/handbook" to a fork for testing or development purposes
#     - run: yarn dev
#   4. visit http://localhost:8081/admin/
#
pid /tmp/nginx/pid;

error_log /dev/stdout warn;

worker_processes 1;

events {
  worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    open_file_cache max=1000 inactive=60s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    sendfile on;
    server_tokens off;
    log_format custom '"$request" '
                        's=$status b=$body_bytes_sent t=$request_time '
                        '"$http_x_forwarded_for" '
                        '"$http_user_agent" "$http_referer"';

    # running as non-root requires a writeable path
    client_body_temp_path /tmp/nginx/client_temp;
    proxy_temp_path       /tmp/nginx/proxy_temp;
    fastcgi_temp_path     /tmp/nginx/fastcgi_temp;
    uwsgi_temp_path       /tmp/nginx/uwsgi_temp;
    scgi_temp_path        /tmp/nginx/scgi_temp;

    server {
        listen 8081 default_server;
        server_name _;
        access_log /dev/stderr combined;
        error_log /dev/stderr warn;

        # let hugo handle requests by default
        # (a possible webhook for updates also goes here)
        location / {
            proxy_pass https://handbook.giantswarm.io;
            proxy_pass_request_headers      on;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header Early-Data $ssl_early_data;
        }

        # proxy /admin, /auth and /callback to the docker-decap-cms-standalone container
        location /admin/ {
            proxy_pass http://host.containers.internal:8080/;   # target: static-cms dev server (live reload), modify for docker
            proxy_pass_request_headers      on;
            proxy_set_header   Host        localhost:8081;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header Early-Data $ssl_early_data;
        }

        location /auth {
            proxy_pass http://host.containers.internal:8082;
            proxy_pass_request_headers      on;
            #proxy_set_header   Host        localhost:8081;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header Early-Data $ssl_early_data;
        }

        location /callback {
            proxy_pass http://host.containers.internal:8082;
            proxy_pass_request_headers      on;
            #proxy_set_header   Host        localhost:8081;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header Early-Data $ssl_early_data;
        }
    }
}
